{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","constants.js","containers/App.js","serviceWorker.js","index.js"],"names":["intialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","name","id","email","className","alt","src","CardList","Object","keys","length","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","dispatch","a","fetch","response","json","data","payload","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","event","target","value","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.48c62eca.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD,\n\t\t REQUEST_ROBOTS_PENDING,\n\t\t REQUEST_ROBOTS_SUCCESS,\n\t\t REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\nconst intialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload})\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({},state,{isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state,{robots: action.payload, isPending:false})\t\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state,{error: action.payload, isPending:false})\t\n\t\tdefault: \n\t\t\treturn state;\n }\n}","import React from 'react';\n\nconst Card = ({name, id, email}) => {\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\treturn Object.keys(robots).length>0 ?(\n\t<div>\n\t{\n\t\trobots.map((user, i) => {\n\t\t\treturn(\n\t\t\t\t<Card \n\t\t\t\t\tkey={robots[i].id}\n\t\t     \t\tid={robots[i].id} \n\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\temail={robots[i].email}/>\n\t\t\t);\n\t\t})\n\t}\n\t</div>\n\t): <h3>No Results</h3>;\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<input \n\t\t\t\taria-label='Search Robots'\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search robots'\n\t\t\t\tonChange={searchChange}\n\t\t\t/>\n\t\t</div>\n \t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender() {\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Ooops. Something went wrong!</h1>\n\t\t}\n\t\treturn this.props.children\n\t}\n}\n\nexport default ErrorBoundry;","import { CHANGE_SEARCH_FIELD,\n\t\t REQUEST_ROBOTS_PENDING,\n\t\t REQUEST_ROBOTS_SUCCESS,\n\t\t REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport async function requestRobots(dispatch) {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\ttry{\n\t\tconst response = await fetch('https://jsonplaceholder.typicode.com/users')\n\t  \tconst data = await response.json();\n\t  \tawait dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data});\n\t} catch(error) {\n\t\tawait dispatch({type: REQUEST_ROBOTS_FAILED, payload: error});\n\t}\n\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn{\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => requestRobots(dispatch)\n\t}\n}\n\n\nclass App extends Component {\n\t\n\tcomponentDidMount(){\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange,robots, isPending} = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t});\n\t\treturn isPending ?\n\t\t\t<h3 className='tc f2'>Loading ... </h3> \n\t\t\t:(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <React.StrictMode>\n  <Provider store={store}>\n  \t<App />\n  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}